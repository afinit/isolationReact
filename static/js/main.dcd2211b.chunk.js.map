{"version":3,"sources":["common/heuristic.ts","common/constants.js","components/Square/index.tsx","containers/Board/index.tsx","components/Rules/index.tsx","common/aiMethods.ts","common/util.ts","common/Game.ts","containers/GameContainer/index.tsx","components/PlayerConfigForm/index.tsx","containers/NewGameForm/index.tsx","index.tsx","App.tsx","components/Square/Square.module.css"],"names":["openMovesHeuristic","name","evaluate","game","pos","maxPlayer","moves","getLegalMoves","length","score","floodfillHeuristic","floodSize","squares","boardSize","q","flood","_loop","currPos","pop","forEach","d","move","queue","rowAdj","Math","abs","newPos","includes","row","SQUARE_EMPTY","floor","isLegal","unshift","addMove","shift","floodfill","getBoard","heuristicOptionDictionary","_heuristicOptionDicti","Object","defineProperty","key","text","value","heuristic","heuristicOptions","values","WINNING_SCORE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","DEFAULT_MINIMAX_DEPTH","DEFAULT_HEURISTIC","DEFAULT_ALPHABETA","SQUARE_PASTMOVE","SQUARE_P1_TOKEN","SQUARE_P2_TOKEN","Square","props","classList","classes","concat","toConsumableArray","SquarePastMove","SquareP1Token","SquareP2Token","legalMove","SquareP1Hover","SquareEmpty","react","className","join","onClick","Board","Array","keys","map","i","j","idx","components_Square","renderSquare","legalMoves","Rules","react_default","a","createElement","bestScore","moveScores","scores","o","max","apply","min","indexOf","aiAlgorithm","endTime","depth","useAlphaBeta","gameCopy","alphaBeta","alpha","arguments","undefined","Number","MIN_SAFE_INTEGER","beta","MAX_SAFE_INTEGER","Date","getTime","objectSpread","startScore","startState","bestMove","reduce","accState","newMove","retVal","minimax","getLineRange","rangeStop","step","range","slice","filterLineRange","lineRange","extraFilter","_","takeWhile","calculateLegalMoves","filter","bs","mbs","eastLimitFun","westLimitFun","flat","boundNumber","num","minNum","maxNum","numAdj","OnePieceGame","_Game","players","reviewMode","historyIdx","history","scoreHistory","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","h","currPlayerIdx","currPosition","copy","currentHistory","squaresCopy","newState","Game","moveScore","GameContainer","_useState","useState","startingPlayerIdx","initializeGame","p1","p2","fill","random","initGame","slicedToArray","_useState3","_useState4","setGame","currPlayer","getPlayer","useEffect","actor","runAi","minimaxDepth","status","p","_ref","asyncToGenerator","regenerator_default","mark","_callee","startTime","aiMove","wrap","_context","prev","next","console","log","prevState","stop","_x","reviewSection","Button","startReview","Fragment","endReview","restartHere","lastMove","nextMove","getScore","gameWidth","style","width","minGameWidth","containers_Board","handleSquareClick","as","Link","to","pathname","playerOptions","PlayerConfigForm","minimaxDepthInput","heuristicInput","alphaBetaInput","playerLabel","playerNum","playerNameLabel","player","minimaxDepthLabel","Form","Input","label","type","onChange","e","setPlayer","target","heuristicLabel","Select","options","defaultValue","data","alphaBetaLabel","Checkbox","toggle","checked","Group","NewGameForm","Segment","setP1","setP2","setBoardSize","ReactDOM","_useState2","_useState5","_useState6","react_router_dom","react_router","path","render","src_containers_GameContainer","NewGameForm_NewGameForm","document","getElementById","module","exports","SquareP2Hover"],"mappings":"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","file":"static/js/main.dcd2211b.chunk.js","sourcesContent":["import { ScoreState } from \"./util\";\nimport { Game } from \"./Game\";\nimport { SQUARE_EMPTY } from \"./constants\";\n\n// SUPPORTING METHODS SECTION\n//  NOTE: These heuristics evaluate the state of the board at the beginning of the maxPlayer's turn\n//    in other words, this is an evaluation of the current state of the board(squares) from the current position(pos)\nconst floodfillHeuristicMethod = (game: Game, pos: number, maxPlayer: boolean) => {\n  const floodSize = floodfill(game.getBoard(), pos, game.boardSize).length;\n  const multiplier = floodSize % 2 === 0 ? 1 : -1;\n  const score = multiplier * (game.boardSize - floodSize);\n  return maxPlayer ? {score, pos} : {score: -score, pos};\n}\n\nconst openMovesHeuristicMethod = (game: Game, pos: number, maxPlayer: boolean) => {\n  const moves = game.getLegalMoves().length;\n  return maxPlayer ? {score: moves, pos} : {score: -moves, pos};\n}\n\nfunction isLegal(squares: number[], pos: number, row: number, boardSize: number) {\n  // check row of new pos with mod boardSize\n  // check if pos is outside of legal pos\n  // return and of both\n  return pos >= 0 && pos < boardSize * boardSize && squares[pos] === SQUARE_EMPTY && Math.floor(pos / boardSize) === row;\n}\n\nfunction addMove(squares: number[], currPos: number, move: number, boardSize: number, queue: Array<number>, flood: Array<number>) {\n  // calc row adjustment for moves that expect a different row from the current\n  const rowAdj = move < -1 || move > 1 ? move / Math.abs(move) : 0;\n  const newPos = currPos + move;\n\n  if (! flood.includes(newPos) && isLegal(squares, newPos, Math.floor(currPos / boardSize) + rowAdj, boardSize)) {\n    queue.unshift(newPos);\n    flood.unshift(newPos);\n  }\n}\n\nfunction floodfill(squares: number[], pos: number, boardSize: number) {\n  let q = [pos];\n  let flood = [pos];\n  const moves = [ -boardSize-1, -boardSize, -boardSize + 1, \n                  -1,                       1, \n                  boardSize-1,  boardSize,  boardSize + 1];\n\n  while (q.length > 0) {\n    // pull next element\n    // loop over all single square moves\n      // if move is legal and not in flood\n        // add to flood\n        // add to q\n\n    const currPos = q[q.length - 1];\n    q.pop();\n    moves.forEach(d => addMove(squares, currPos, d, boardSize, q, flood));\n  }\n\n  flood.shift();\n\n  return flood;\n}\n  \n// HEURISTICS SECTION\nexport interface Heuristic {\n  name: string;\n  evaluate: (game: Game, pos: number, maxPlayer: boolean) => ScoreState;\n}\n\nexport const openMovesHeuristic: Heuristic = {\n  name: \"OpenMoves\",\n  evaluate: openMovesHeuristicMethod\n}\n\nexport const floodfillHeuristic: Heuristic = {\n  name: \"FloodFill\",\n  evaluate: floodfillHeuristicMethod\n}\n\nconst OPENMOVES = \"OpenMoves\";\nconst FLOODFILL = \"FloodFill\";\n\nexport type HeuristicValue = \"FloodFill\" | \"OpenMoves\";\n\nexport const heuristicOptionDictionary = {\n  [OPENMOVES]: {\n    key: \"openmoves\",\n    text: OPENMOVES,\n    value: OPENMOVES,\n    heuristic: openMovesHeuristic\n  },\n  [FLOODFILL]: {\n    key: \"floodfill\",\n    text: FLOODFILL,\n    value: FLOODFILL,\n    heuristic: floodfillHeuristic\n  }\n};\n\nexport const heuristicOptions = Object.values(heuristicOptionDictionary);\n","import { heuristicOptionDictionary } from \"./heuristic\";\n\nexport const WINNING_SCORE = 1000;\nexport const MIN_BOARD_SIZE = 3;\nexport const MAX_BOARD_SIZE = 15;\nexport const MIN_MINIMAX_DEPTH = 1;\nexport const MAX_MINIMAX_DEPTH = 15;\nexport const DEFAULT_MINIMAX_DEPTH = 5;\nexport const DEFAULT_HEURISTIC = heuristicOptionDictionary[\"OpenMoves\"].heuristic;\nexport const DEFAULT_ALPHABETA = false;\nexport const PASTMOVECHAR = \"#\";\nexport const CURRENTPOSCHAR = \"ø\";\n\nexport const SQUARE_EMPTY = -2;\nexport const SQUARE_PASTMOVE = -1;\nexport const SQUARE_P1_TOKEN = 0;\nexport const SQUARE_P2_TOKEN = 1;\n\nexport const COLOR_P1_HOVER = \"#FFA5A5\";  // FFA5A5   AAAE5B\nexport const COLOR_P1_TOKEN = \"#EC368D\";  // EC368D   3B5626\nexport const COLOR_P2_HOVER = \"#51E5FF\";  // 51E5FF   E49C39\nexport const COLOR_P2_TOKEN = \"#440381\";  // 440381   FC7C15\nexport const COLOR_PASTMOVE = \"#FFD6C0\";  // FFD6C0   4A3B09\nexport const COLOR_EMPTY = \"#fff\";","import * as React from \"react\";\nimport {\n  SQUARE_PASTMOVE,\n  SQUARE_P1_TOKEN,\n  SQUARE_P2_TOKEN,\n} from \"../../common/constants\";\n\nimport classes from './Square.module.css';\n\ninterface SquareProps {\n  value: number;\n  legalMove: boolean;\n  onClick(i: React.MouseEvent): void;\n}\n\nfunction Square(props: SquareProps) {\n  let classList = [classes.Square]\n  if (props.value === SQUARE_PASTMOVE) classList = [...classList, classes.SquarePastMove];\n  else if (props.value === SQUARE_P1_TOKEN) classList = [...classList, classes.SquareP1Token];\n  else if (props.value === SQUARE_P2_TOKEN) classList = [...classList, classes.SquareP2Token];\n  else if (props.legalMove) classList = [...classList, classes.SquareP1Hover];\n  else classList = [...classList, classes.SquareEmpty];\n  \n  return <button className={classList.join(' ')} onClick={props.onClick} />;\n}\n\nexport default Square;\n","import * as React from \"react\";\nimport Square from \"../../components/Square\";\n\ninterface BoardProps {\n  squares: number[];\n  legalMoves: number[];\n  onClick(i: number): void;\n  boardSize: number;\n}\n\nconst Board = function(props: BoardProps) {\n  const renderSquare = function(i: number, legalMove: boolean) {\n    return (\n      <Square\n        key={i}\n        value={props.squares[i]}\n        legalMove={legalMove}\n        onClick={() => props.onClick(i)}\n      />\n    );\n  };\n\n  const boardSize = props.boardSize;\n  return (\n    <div>\n      {[...(Array<string>(boardSize) as any).keys()].map(i => (\n        <div key={\"boardRow\" + i} className=\"board-row\">\n          {[...(Array<string>(boardSize) as any).keys()].map(j => {\n            const idx = j + i * boardSize;\n            return renderSquare(idx, props.legalMoves.includes(idx));\n          })}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nexport default () => (\n  <div className=\"rules\">\n    <h3>Rules</h3>\n    <ul>\n      <li>2 players trade turns moving the game piece (ø)</li>\n      <li>\n        The game piece (ø) can be moved like a queen in chess. Horizontally,\n        vertically, diagonally.\n      </li>\n      <li>\n        Moves cannot be to or through previous moves, these will be marked as\n        (#)\n      </li>\n      <li>First move can go anywhere</li>\n      <li>Last player to be able to move wins the game</li>\n    </ul>\n  </div>\n);\n","import { Heuristic } from \"./heuristic\";\nimport { ScoreState } from \"./util\";\nimport { WINNING_SCORE } from \"./constants\";\nimport { Game } from \"./Game\";\n\n// AI METHODS SECTION\n\nfunction bestScore(moveScores: ScoreState[], maxPlayer: boolean): ScoreState {\n  const scores = moveScores.map(o => o.score);\n  // maxPlayer wants to maximize the outcome of the decision\n  const bestScore = maxPlayer ? Math.max(...scores) : Math.min(...scores);\n\n  return moveScores[scores.indexOf(bestScore)];\n}\n\nexport function aiAlgorithm(\n  game: Game,\n  maxPlayer: boolean, \n  endTime: number, \n  depth: number,\n  heuristic: Heuristic,\n  useAlphaBeta: boolean\n): ScoreState {\n  const moveScores = game.getLegalMoves().map(\n    move => {\n      const gameCopy = game.move(move);\n      if (useAlphaBeta) {\n        // if maxPlayer, then we need to minimize the value of the board for the next move\n        const scoreStuff = alphaBeta(gameCopy, move, endTime, depth-1, heuristic, !maxPlayer);\n        return scoreStuff\n      }\n      else {\n        return minimax(gameCopy, move, !maxPlayer, endTime, depth-1, heuristic)\n      }\n    }\n  );\n\n  const score = bestScore(moveScores, maxPlayer);\n  return {...score, depth: score.depth !== undefined ? depth - score.depth : undefined};\n}\n  \n// calculate minimax decision for the current state of the board from viewpoint of maxPlayer\n//   maxPlayer is the one moving, so current state would be bad for maxPlayer if there are no moves\nexport function minimax(\n  game: Game,\n  move: number, \n  maxPlayer: boolean, \n  endTime: number, \n  depth: number,\n  heuristic: Heuristic\n): ScoreState {\n  const legalMoves = game.getLegalMoves();\n  if (legalMoves.length === 0) {\n    // if there are no moves, this is bad for maxPlayer\n    return {score: maxPlayer ? -(WINNING_SCORE + depth) : WINNING_SCORE + depth, pos: move, depth};\n  } else if ( depth === 0 || endTime < new Date().getTime() ) {\n    return {...heuristic.evaluate(game, move, maxPlayer), depth};\n  } else {\n    const moveScores = legalMoves.map( newMove => {\n      const gameCopy = game.move(newMove);\n      return minimax(gameCopy, newMove, !maxPlayer, endTime, depth - 1, heuristic);\n    });\n\n    // need to replace move to propagate back the most recent move\n    return {...bestScore(moveScores, maxPlayer), pos: move};\n  }\n}\n\n\nfunction alphaBeta(\n  game: Game,\n  move: number,\n  endTime: number,\n  depth: number,\n  heuristic: Heuristic,\n  maxPlayer: boolean,\n  alpha: number = Number.MIN_SAFE_INTEGER,\n  beta: number = Number.MAX_SAFE_INTEGER\n): ScoreState {\n  const legalMoves = game.getLegalMoves();\n  if (legalMoves.length === 0) {\n    return {score: (WINNING_SCORE + depth) * (maxPlayer ? -1 : 1), pos: move, depth};\n  } else if (depth === 0 || endTime < new Date().getTime()) {\n    return {...heuristic.evaluate(game, move, maxPlayer), depth};\n  } else {\n    // default state starts at the move passed\n    const startScore = maxPlayer ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\n    const startState = {score: startScore, pos: move, alpha, beta};\n    const bestMove = legalMoves.reduce( (accState, newMove) => {\n      if (maxPlayer && accState.score >= accState.beta) return accState;\n      else if (!maxPlayer && accState.score <= accState.alpha) return accState;\n      else {\n        const gameCopy = game.move(newMove);\n        const retVal = alphaBeta(gameCopy, newMove, endTime, depth-1, heuristic, !maxPlayer, accState.alpha, accState.beta);\n\n        let score = accState.score;\n        let pos = accState.pos;\n        let alpha = accState.alpha;\n        let beta = accState.beta;\n        if (maxPlayer && retVal.score > score) {\n          score = retVal.score;\n          pos = newMove;\n          alpha = Math.max(retVal.score, alpha)\n        }\n        else if (!maxPlayer && retVal.score < score) {\n          score = retVal.score;\n          pos = newMove;\n          beta = Math.min(retVal.score, beta)\n        }\n\n        return {...accState, score, pos, alpha, beta, depth: retVal.depth};\n      }\n    }, startState)\n    return {...bestMove, pos: move}\n  }\n}\n","import { range, takeWhile } from 'lodash';\nimport { SQUARE_EMPTY } from './constants';\n\nexport interface ScoreState {\n  score: number;\n  pos: number;\n  depth?: number;\n}\n\nfunction getLineRange(pos: number, rangeStop: number, step: number) {\n  return range(pos, rangeStop, step).slice(1);\n}\n\nfunction filterLineRange(\n  lineRange: Array<number>, \n  squares: number[], \n  extraFilter = (_: number) => true\n) {\n  return takeWhile(lineRange, (i) => squares[i] === SQUARE_EMPTY && extraFilter(i));\n}\n\nfunction calculateQueenMoves(squares: number[], pos: number | undefined, boardSize: number) {\n  if (pos === undefined) {\n    return range(0, boardSize * boardSize).filter(i => squares[i] === SQUARE_EMPTY);\n  }\n  else {\n    const maxBoardSize = boardSize * boardSize;\n    const bs = boardSize;\n    const mbs = maxBoardSize;\n    const eastLimitFun = (i: number) => i % bs !== 0;\n    const westLimitFun = (i: number) => i % bs !== bs-1;\n\n    const n  = filterLineRange( getLineRange(pos, -1, -bs),   squares);\n    const ne = filterLineRange( getLineRange(pos, -1, -(bs-1)), squares, eastLimitFun);\n    const e  = filterLineRange( getLineRange(pos, mbs, 1),    squares, eastLimitFun);\n    const se = filterLineRange( getLineRange(pos, mbs, bs+1), squares, eastLimitFun);\n    const s  = filterLineRange( getLineRange(pos, mbs, bs),   squares);\n    const sw = filterLineRange( getLineRange(pos, mbs, bs-1), squares, westLimitFun);\n    const w  = filterLineRange( getLineRange(pos, -1, -1),    squares, westLimitFun);\n    const nw = filterLineRange( getLineRange(pos, -1, -(bs+1)), squares, westLimitFun);\n\n    return [n, ne, e, se, s, sw, w, nw].flat();\n  }\n}\n\nexport const calculateLegalMoves = calculateQueenMoves;\n\nexport const boundNumber = (num: number, minNum: number, maxNum: number) => {\n  let numAdj = minNum;\n  if (num > maxNum) numAdj = maxNum\n  else if (num > minNum) numAdj = num\n  \n  return numAdj;\n}\n","import { PlayerConfig } from \"../components/PlayerConfigForm\";\nimport { SQUARE_PASTMOVE, SQUARE_P1_TOKEN } from \"./constants\";\nimport { calculateLegalMoves } from \"./util\";\n\nexport abstract class Game {\n  boardSize: number;\n  players: PlayerConfig[];\n  reviewMode: boolean;\n\n  constructor(boardSize: number, players: PlayerConfig[], reviewMode: boolean) {\n    this.boardSize = boardSize;\n    this.players = players;\n    this.reviewMode = reviewMode;\n  }\n\n  abstract copy(): Game;\n  abstract getPlayer(): PlayerConfig;\n  abstract getBoard(): number[];\n  abstract getScore(): number | undefined;\n  abstract getPosition(): number | undefined;\n  abstract getLegalMoves(): number[];\n  abstract endReview(): Game;\n  abstract lastMove(): Game;\n  abstract nextMove(): Game;\n  abstract restartHere(): Game;\n  abstract moveScore(i: number, score: number): Game;\n  move(i: number) {\n    return this.moveScore(i, 0);\n  }\n\n  startReview() {\n    this.reviewMode = true;\n    return this;\n  }\n}\n\ninterface OnePieceHistory {\n  squares: number[];\n  currPlayerIdx: number;\n  currPosition: number | undefined;\n}\n\nexport class OnePieceGame extends Game {\n  private historyIdx: number;\n  private history: OnePieceHistory[];\n  private scoreHistory: number[];\n  private legalMoves: number[];\n\n  constructor(\n    boardSize: number,\n    players: PlayerConfig[],\n    reviewMode: boolean,\n    historyIdx: number,\n    history: OnePieceHistory[],\n    legalMoves: number[],\n    scoreHistory: number[]\n  ) {\n    super(boardSize, players, reviewMode);\n    this.historyIdx = historyIdx;\n    this.history = history;\n    this.legalMoves = legalMoves;\n    this.scoreHistory = scoreHistory;\n  }\n\n  copy() {\n    return new OnePieceGame(\n      this.boardSize,\n      this.players,\n      this.reviewMode,\n      this.historyIdx,\n      this.history.map(h => {\n        return { ...h };\n      }),\n      this.legalMoves,\n      this.scoreHistory\n    );\n  }\n\n  getPlayer() {\n    return this.players[this.history[this.historyIdx].currPlayerIdx];\n  }\n  getBoard() {\n    return this.history[this.historyIdx].squares.slice();\n  }\n  getScore() {\n    return this.scoreHistory[this.historyIdx];\n  }\n  getPosition() {\n    return this.history[this.history.length - 1].currPosition;\n  }\n  getLegalMoves() {\n    return this.legalMoves;\n  }\n  endReview() {\n    const gameCopy = this.copy();\n    gameCopy.historyIdx = this.history.length - 1;\n    gameCopy.reviewMode = false;\n    return gameCopy;\n  }\n  lastMove() {\n    const gameCopy = this.copy();\n    gameCopy.historyIdx = Math.max(0, gameCopy.historyIdx - 1);\n    return gameCopy;\n  }\n  nextMove() {\n    const gameCopy = this.copy();\n    gameCopy.historyIdx = Math.min(\n      gameCopy.historyIdx + 1,\n      gameCopy.history.length - 1\n    );\n    return gameCopy;\n  }\n  restartHere() {\n    const gameCopy = this.copy();\n    gameCopy.history = gameCopy.history.slice(0, gameCopy.historyIdx + 1);\n    gameCopy.reviewMode = false;\n    gameCopy.legalMoves = calculateLegalMoves(\n      gameCopy.getBoard(),\n      gameCopy.history[gameCopy.historyIdx].currPosition,\n      gameCopy.boardSize\n    );\n    return gameCopy;\n  }\n\n  moveScore(i: number, score: number = 0): Game {\n    // FIXME::: COULD USE SOME GUARDS HERE\n    const currentHistory = this.history[this.history.length - 1];\n    const squaresCopy = currentHistory.squares.slice();\n    if (currentHistory.currPosition !== undefined) {\n      squaresCopy[currentHistory.currPosition] = SQUARE_PASTMOVE;\n    }\n    squaresCopy[i] = SQUARE_P1_TOKEN;\n    const newState = {\n      squares: squaresCopy,\n      currPlayerIdx: (currentHistory.currPlayerIdx + 1) % 2,\n      currPosition: i\n    };\n\n    return new OnePieceGame(\n      this.boardSize,\n      this.players,\n      this.reviewMode,\n      this.historyIdx + 1,\n      [...this.history, newState],\n      calculateLegalMoves(squaresCopy, i, this.boardSize),\n      [...this.scoreHistory, score]\n    );\n  }\n}\n\nexport function initializeGame(\n  boardSize: number,\n  players: PlayerConfig[],\n  squares: number[],\n  startingPlayerIdx: number\n) {\n  const history = [\n    {\n      squares,\n      currPlayerIdx: startingPlayerIdx,\n      currPosition: undefined\n    }\n  ];\n  const reviewMode = false;\n\n  return new OnePieceGame(\n    boardSize,\n    players,\n    reviewMode,\n    0,\n    history,\n    calculateLegalMoves(squares, undefined, boardSize),\n    []\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { includes } from \"lodash\";\n\nimport Board from \"../Board\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./index.css\";\n\nimport { Button } from \"semantic-ui-react\";\nimport Rules from \"../../components/Rules\";\nimport { PlayerConfig } from \"../../components/PlayerConfigForm\";\nimport {\n  DEFAULT_MINIMAX_DEPTH,\n  DEFAULT_HEURISTIC,\n  DEFAULT_ALPHABETA,\n  SQUARE_EMPTY\n} from \"../../common/constants\";\nimport { aiAlgorithm } from \"../../common/aiMethods\";\nimport { Game, initializeGame } from \"../../common/Game\";\n\ninterface GameProps {\n  boardSize: number;\n  p1: PlayerConfig;\n  p2: PlayerConfig;\n}\n\nconst GameContainer = function(props: GameProps) {\n  const nextPlayer = (p: PlayerConfig) =>\n    p === props.p1 ? props.p2 : props.p1;\n\n  const boardSize = props.boardSize;\n  const squarePixels = 34;\n  const minGameWidth = 320;\n\n  const [initGame] = useState(initializeGame(\n    boardSize,\n    [props.p1, props.p2],\n    Array<number>(boardSize * boardSize).fill(SQUARE_EMPTY),\n    Math.random() < 0.5 ? 0 : 1\n  ) as Game);\n  const [game, setGame] = useState(initGame);\n  const currPlayer: PlayerConfig = game.getPlayer();\n\n  useEffect(() => {\n    if (currPlayer.actor === \"AI\" && !game.reviewMode)\n      runAi(currPlayer.minimaxDepth || DEFAULT_MINIMAX_DEPTH);\n  });\n\n  const runAi = async (minimaxDepth: number) => {\n    if (game.getLegalMoves().length > 0) {\n      const startTime = new Date().getTime();\n      const aiMove = aiAlgorithm(\n        game,\n        true,\n        new Date().getTime() + 1000,\n        minimaxDepth,\n        currPlayer.heuristic || DEFAULT_HEURISTIC,\n        currPlayer.alphaBeta === undefined\n          ? DEFAULT_ALPHABETA\n          : currPlayer.alphaBeta\n      );\n      const name = currPlayer.heuristic ? currPlayer.heuristic.name : \"NONE\";\n      console.log(\"minimax: \", name, aiMove);\n      console.log(\"runtime: \", new Date().getTime() - startTime);\n\n      setGame((prevState: Game) => prevState.moveScore(aiMove.pos, aiMove.score));\n    }\n  };\n\n  const handleSquareClick = function(i: number) {\n    if (currPlayer.actor === \"Human\" && !game.reviewMode) {\n      if (!includes(game.getLegalMoves(), i)) return;\n\n      setGame((prevState: Game) => prevState.move(i));\n    }\n  };\n\n  const startReviewClick = function() {\n    setGame((prevState: Game) => prevState.copy().startReview());\n  };\n\n  const endReviewClick = function() {\n    setGame((prevState: Game) => prevState.endReview());\n  };\n  const lastMoveClick = function() {\n    setGame((prevState: Game) => prevState.lastMove());\n  };\n  const nextMoveClick = function() {\n    setGame((prevState: Game) => prevState.nextMove());\n  };\n  const restartHereClick = function() {\n    setGame((prevState: Game) => prevState.restartHere());\n  };\n\n  let reviewSection = (\n    <div className=\"game-buttons\">\n      <Button onClick={startReviewClick}>Review Moves</Button>\n    </div>\n  );\n  if (game.reviewMode) {\n    reviewSection = (\n      <>\n        <div className=\"game-buttons\">\n          <Button onClick={endReviewClick}>End Review</Button>\n          <Button onClick={restartHereClick}>Restart Here</Button>\n          <h3>Review Mode</h3>\n        </div>\n        <div className=\"game-buttons\">\n          <Button onClick={lastMoveClick}>Last Move</Button>\n          <Button onClick={nextMoveClick}>Next Move</Button>\n          {game.getScore() !== undefined && <p>Assessed Score: {game.getScore()}</p>}\n        </div>\n      </>\n    );\n  }\n\n  let status;\n  if (game.getLegalMoves().length !== 0 || game.reviewMode) {\n    status = \"Next Move: \" + currPlayer.name;\n  } else {\n    status = \"Winner: \" + nextPlayer(currPlayer).name;\n  }\n\n  const gameWidth = squarePixels * boardSize + 20;\n\n  return (\n    <div\n      className=\"game\"\n      style={{\n        width: gameWidth > minGameWidth ? gameWidth : minGameWidth + \"px\"\n      }}\n    >\n      <h2>The Game of Isolation</h2>\n      <Rules />\n\n      <div className=\"game-info\">\n        <div>\n          {\"Starting Player: \" + initGame.getPlayer().name}\n          <br />\n          {status}\n        </div>\n      </div>\n      <div className=\"game-board\">\n        <Board\n          squares={game.getBoard()}\n          boardSize={boardSize}\n          legalMoves={game.getLegalMoves()}\n          onClick={i => handleSquareClick(i)}\n        />\n      </div>\n      <div className=\"game-buttons\">\n        <Button as={Link} to={{ pathname: \"/\" }}>\n          New Game\n        </Button>\n      </div>\n      {reviewSection}\n    </div>\n  );\n};\n\nexport default GameContainer;\n","import React from \"react\";\nimport { Form, Checkbox } from \"semantic-ui-react\";\nimport { DEFAULT_MINIMAX_DEPTH, MIN_MINIMAX_DEPTH, MAX_MINIMAX_DEPTH, DEFAULT_HEURISTIC, DEFAULT_ALPHABETA } from \"../../common/constants\";\nimport { boundNumber } from \"../../common/util\";\nimport { Heuristic, heuristicOptions, heuristicOptionDictionary, HeuristicValue } from \"../../common/heuristic\";\n\nexport type ActorType = \"AI\" | \"Human\";\nexport interface PlayerConfig {\n  name: string;\n  actor: ActorType;\n  minimaxDepth?: number;\n  heuristic?: Heuristic;\n  alphaBeta?: boolean;\n}\n\ninterface Props {\n  playerNum: number;\n  player: PlayerConfig;\n  setPlayer: React.Dispatch<React.SetStateAction<PlayerConfig>>;\n}\n\nconst playerOptions = [\n  {\n    key: \"ai\",\n    text: \"AI\",\n    value: \"AI\"\n  },\n  {\n    key: \"human\",\n    text: \"Human\",\n    value: \"Human\"\n  }\n];\n\nconst boundMinimaxDepth = (minimaxDepth: number) => boundNumber(minimaxDepth, MIN_MINIMAX_DEPTH, MAX_MINIMAX_DEPTH);\n\nexport default function(props: Props) {\n  const playerLabel = `Player${props.playerNum}`\n  const playerNameLabel = `${playerLabel} Name`\n  let minimaxDepthInput;\n  let heuristicInput;\n  let alphaBetaInput;\n  if (props.player.actor === \"AI\") {\n    const minimaxDepthLabel = `${playerLabel} Minimax Depth (AI Smartness Level)`\n    const minimaxDepth = props.player.minimaxDepth !== undefined ? props.player.minimaxDepth : DEFAULT_MINIMAX_DEPTH;\n    minimaxDepthInput = (\n      <Form.Input\n        label={minimaxDepthLabel}\n        value={minimaxDepth}\n        type=\"number\"\n        onChange={e => props.setPlayer({...props.player, minimaxDepth: boundMinimaxDepth(+e.target.value)})}\n      />\n    )\n\n    const heuristicLabel = `${playerLabel} Heuristic (Strategy)`;\n    const heuristic = props.player.heuristic ? props.player.heuristic : DEFAULT_HEURISTIC;\n    heuristicInput = (\n      <Form.Select\n        label={heuristicLabel}\n        options={heuristicOptions}\n        defaultValue={heuristic.name}\n        type=\"string\"\n        onChange={(_, data) => {\n          props.setPlayer({\n            ...props.player, \n            heuristic: heuristicOptionDictionary[data.value as HeuristicValue].heuristic\n          })}}\n      />\n    )\n\n    const alphaBetaLabel = `${playerLabel} AlphaBeta`;\n    const alphaBeta = props.player.alphaBeta ? props.player.alphaBeta : DEFAULT_ALPHABETA;\n    alphaBetaInput = (\n      <Checkbox\n        label={alphaBetaLabel}\n        toggle\n        checked={alphaBeta}\n        onChange={ () => \n          props.setPlayer({\n            ...props.player,\n            alphaBeta: !alphaBeta\n          })\n        }\n      />\n    )\n  }\n\n  return (\n    <Form.Group>\n      <Form.Select \n        label={playerLabel} \n        options={playerOptions} \n        defaultValue={props.player.actor} \n        onChange={(_, data) => {\n          props.setPlayer({\n            name: `${data.value}${props.playerNum}`,\n            actor: data.value as ActorType,\n            minimaxDepth: data.value === \"AI\" ? DEFAULT_MINIMAX_DEPTH : undefined,\n            heuristic: data.value === \"AI\" ? DEFAULT_HEURISTIC : undefined,\n            alphaBeta: data.value === \"AI\" ? DEFAULT_ALPHABETA : undefined\n          })\n        }}\n      />\n      <Form.Input\n        label={playerNameLabel}\n        value={props.player.name}\n        type=\"string\"\n        onChange={e => props.setPlayer({...props.player, name: e.target.value})}\n      />\n      {minimaxDepthInput}\n      {heuristicInput}\n      {alphaBetaInput}\n    </Form.Group>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport PlayerConfigForm, {\n  PlayerConfig\n} from \"../../components/PlayerConfigForm\";\nimport \"./index.css\";\nimport { Form, Button, Segment } from \"semantic-ui-react\";\n\nimport { MIN_BOARD_SIZE, MAX_BOARD_SIZE } from \"../../common/constants\";\nimport { boundNumber } from \"../../common/util\";\n\nexport interface Props {\n  p1: PlayerConfig;\n  p2: PlayerConfig;\n  boardSize: number;\n  setP1: React.Dispatch<React.SetStateAction<PlayerConfig>>;\n  setP2: React.Dispatch<React.SetStateAction<PlayerConfig>>;\n  setBoardSize: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport default function NewGameForm(props: Props) {\n  const boundBoardSize = (boardSize: number) =>\n    boundNumber(boardSize, MIN_BOARD_SIZE, MAX_BOARD_SIZE);\n\n  return (\n    <div className=\"new-game-form\">\n      <Segment>\n        <Form>\n          <PlayerConfigForm\n            playerNum={1}\n            player={props.p1}\n            setPlayer={props.setP1}\n          />\n          <PlayerConfigForm\n            playerNum={2}\n            player={props.p2}\n            setPlayer={props.setP2}\n          />\n          <Form.Group>\n            <Form.Input\n              label=\"Board Size\"\n              type=\"number\"\n              value={props.boardSize}\n              min={MIN_BOARD_SIZE}\n              max={MAX_BOARD_SIZE}\n              onChange={e => {\n                props.setBoardSize(boundBoardSize(+e.target.value));\n              }}\n            />\n          </Form.Group>\n\n          <Button as={Link} to={{ pathname: \"/game\" }}>\n            Start Game\n          </Button>\n        </Form>\n      </Segment>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);","import React, { useState } from \"react\";\nimport GameContainer from \"./containers/GameContainer\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport NewGameForm from \"./containers/NewGameForm\";\nimport { PlayerConfig } from \"./components/PlayerConfigForm\";\nimport { DEFAULT_MINIMAX_DEPTH, DEFAULT_HEURISTIC, DEFAULT_ALPHABETA } from \"./common/constants\";\n\nexport default function App() {\n  const [p1, setP1] = useState<PlayerConfig>({\n    name: \"Human1\",\n    actor: \"Human\"\n  })\n  const [p2, setP2] = useState<PlayerConfig>({\n    name: \"AI2\",\n    actor: \"AI\",\n    minimaxDepth: DEFAULT_MINIMAX_DEPTH,\n    heuristic: DEFAULT_HEURISTIC,\n    alphaBeta: DEFAULT_ALPHABETA\n  })\n  const [boardSize, setBoardSize] = useState(9);\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/game\" render={\n          () => <GameContainer\n                  boardSize={boardSize}\n                  p1={p1} \n                  p2={p2} />\n        } />\n        <Route\n          path=\"/\"\n          render={() => (\n            <NewGameForm\n              p1={p1}\n              p2={p2}\n              boardSize={boardSize}\n              setP1={setP1}\n              setP2={setP2}\n              setBoardSize={setBoardSize}\n            />\n          )}\n        />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__1Xs-e\",\"SquareEmpty\":\"Square_SquareEmpty__3ICql\",\"SquareP1Hover\":\"Square_SquareP1Hover__Wg3Ra\",\"SquareP2Hover\":\"Square_SquareP2Hover__1IU3E\",\"SquarePastMove\":\"Square_SquarePastMove__3XWI9\",\"SquareP1Token\":\"Square_SquareP1Token__2LNC3\",\"SquareP2Token\":\"Square_SquareP2Token__3Wmfz\"};"],"sourceRoot":""}